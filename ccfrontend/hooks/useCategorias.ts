import { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';
import { CategoriaGasto, CategoriaCreateRequest } from '@/types/gastos';
import { api } from '@/lib/api';

export function useCategorias(comunidadId: number | null, isSuperAdmin: boolean = false) {
  const [categorias, setCategorias] = useState<CategoriaGasto[]>([]);
  const [estadisticas, setEstadisticas] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchCategorias = async () => {
    if (!comunidadId && !isSuperAdmin) {
      console.log('‚ö†Ô∏è Sin comunidadId y no es superadmin - no cargar');
      setLoading(false);
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      console.log('üîç Cargando categor√≠as:', { comunidadId, isSuperAdmin });
      
      let url: string;
      let response: any;

      // ‚úÖ L√ìGICA MEJORADA CON M√ÅS LOGS
      if (isSuperAdmin) {
        // SuperAdmin usa el endpoint global
        url = '/categorias-gasto';
        if (comunidadId && comunidadId > 0) {
          url += `?comunidad_id=${comunidadId}`;
          console.log('üè¢ SuperAdmin filtrando por comunidad:', comunidadId);
        } else {
          console.log('üåç SuperAdmin viendo todas las comunidades');
        }
        console.log('üîç SuperAdmin URL final:', url);
        response = await api.get(url);
      } else {
        // Usuarios normales usan endpoint espec√≠fico de comunidad
        if (!comunidadId || comunidadId === 0) {
          throw new Error('Comunidad requerida para usuarios no admin');
        }
        url = `/categorias-gasto/comunidad/${comunidadId}`;
        console.log('üë§ Usuario normal URL:', url);
        response = await api.get(url);
      }
      
      // ‚úÖ LOGGING MEJORADO
      console.log('üì® Respuesta completa:', response);
      console.log('üìä Status:', response.status);
      console.log('üìã Headers:', response.headers);
      
      // ‚úÖ MANEJO CONSISTENTE DE LA RESPUESTA
      const data = response.data?.data || response.data || [];
      const stats = response.data?.estadisticas || null;
      
      console.log('üìã Categor√≠as procesadas:', data);
      console.log('üìä Estad√≠sticas procesadas:', stats);
      
      setCategorias(Array.isArray(data) ? data : []);
      setEstadisticas(stats);
      
    } catch (err: any) {
      console.error('‚ùå Error completo:', err);
      console.error('üìã Response data:', err.response?.data);
      console.error('üìã Response status:', err.response?.status);
      console.error('üìã Request config:', err.config);
      
      // Manejo mejorado de errores
      let errorMsg = 'Error al cargar categor√≠as';
      
      if (err.response?.data?.error) {
        errorMsg = err.response.data.error;
      } else if (err.response?.data?.message) {
        errorMsg = err.response.data.message;
      } else if (err.message) {
        errorMsg = err.message;
      }
      
      // Mostrar detalles adicionales en desarrollo
      if (process.env.NODE_ENV === 'development') {
        console.error('üîç Error details:', {
          status: err.response?.status,
          statusText: err.response?.statusText,
          data: err.response?.data,
          config: err.config
        });
      }
      
      setError(errorMsg);
      setCategorias([]);
      setEstadisticas(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCategorias();
  }, [comunidadId, isSuperAdmin]);

  // ‚úÖ CREAR CATEGOR√çA - SOLO PARA COMUNIDAD ESPEC√çFICA
  const createCategoria = async (data: CategoriaCreateRequest) => {
    if (!comunidadId || comunidadId === 0) {
      throw new Error('Se requiere una comunidad espec√≠fica para crear categor√≠as');
    }

    try {
      console.log('‚ûï Creando categor√≠a:', data);
      
      const response = await api.post(`/categorias-gasto/comunidad/${comunidadId}`, data);
      
      // Recargar despu√©s de crear
      await fetchCategorias();
      return response.data;
      
    } catch (err: any) {
      console.error('‚ùå Error creando categor√≠a:', err);
      const errorMsg = err.response?.data?.error || 'Error al crear categor√≠a';
      throw new Error(errorMsg);
    }
  };

  // ‚úÖ ACTUALIZAR CATEGOR√çA
  const updateCategoria = async (id: number, data: Partial<CategoriaCreateRequest & { activa?: boolean }>) => {
    try {
      console.log('‚úèÔ∏è Actualizando categor√≠a:', id, data);
      
      const response = await api.put(`/categorias-gasto/${id}`, data);
      
      // Recargar despu√©s de actualizar
      await fetchCategorias();
      return response.data;
      
    } catch (err: any) {
      console.error('‚ùå Error actualizando categor√≠a:', err);
      const errorMsg = err.response?.data?.error || 'Error al actualizar categor√≠a';
      throw new Error(errorMsg);
    }
  };

  // ‚úÖ TOGGLE ESTADO (usar endpoint espec√≠fico si existe)
  const toggleCategoria = async (id: number, activa: boolean) => {
    try {
      console.log('üîÑ Cambiando estado categor√≠a:', id, 'activa:', activa);
      
      // Usar endpoint espec√≠fico si existe, sino usar PUT gen√©rico
      let response;
      try {
        response = await api.patch(`/categorias-gasto/${id}/toggle`);
      } catch (toggleError) {
        // Fallback a PUT si no existe el endpoint toggle
        response = await api.put(`/categorias-gasto/${id}`, { activa });
      }
      
      // Recargar despu√©s del cambio
      await fetchCategorias();
      return response.data;
      
    } catch (err: any) {
      console.error('‚ùå Error cambiando estado categor√≠a:', err);
      const errorMsg = err.response?.data?.error || 'Error al cambiar estado';
      throw new Error(errorMsg);
    }
  };

  // ‚úÖ ELIMINAR CATEGOR√çA
  const deleteCategoria = async (id: number) => {
    try {
      console.log('üóëÔ∏è Eliminando categor√≠a:', id);
      
      // Intentar DELETE primero, sino usar PUT para desactivar
      let response;
      try {
        response = await api.delete(`/categorias-gasto/${id}`);
      } catch (deleteError) {
        // Si falla DELETE, desactivar
        console.log('üîÑ DELETE fall√≥, desactivando en su lugar...');
        response = await api.put(`/categorias-gasto/${id}`, { activa: false });
      }
      
      // Recargar despu√©s de eliminar/desactivar
      await fetchCategorias();
      return response.data;
      
    } catch (err: any) {
      console.error('‚ùå Error eliminando categor√≠a:', err);
      const errorMsg = err.response?.data?.error || 'Error al eliminar categor√≠a';
      throw new Error(errorMsg);
    }
  };

  return {
    categorias,
    estadisticas,
    loading,
    error,
    createCategoria,
    updateCategoria,
    deleteCategoria,
    toggleCategoria,
    refetch: fetchCategorias,
  };
}